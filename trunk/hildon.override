/* -*- Mode: C; c-basic-offset: 4 -*-
 * python-hildon - Python bindings for the Hildon toolkit.
 *
 *   hildon.override: overrides for the hildon module.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA
 */
%%
headers
#define NO_IMPORT_PYGOBJECT
#include <pygobject.h>

#include "hildon-includes.h"
#include "hildon-types.h"

%%
modulename hildon

%%
import gobject.GObject as PyGObject_Type
import gtk.Bin as PyGtkBin_Type
import gtk.Button as PyGtkButton_Type
import gtk.Container as PyGtkContainer_Type
import gtk.Dialog as PyGtkDialog_Type
import gtk.Entry as PyGtkEntry_Type
import gtk.EventBox as PyGtkEventBox_Type
import gtk.FileFilter as PyGtkFileFilter_Type
//import gtk.FileSystem as PyGtkFileSystem_Type
import gtk.HBox as PyGtkHBox_Type
import gtk.IconView as PyGtkIconView_Type
import gtk.Label as PyGtkLabel_Type
import gtk.ListStore as PyGtkListStore_Type
import gtk.Menu as PyGtkMenu_Type
import gtk.Notebook as PyGtkNotebook_Type
import gtk.ProgressBar as PyGtkProgressBar_Type
import gtk.RadioButton as PyGtkRadioButton_Type
import gtk.Scale as PyGtkScale_Type
import gtk.ScrolledWindow as PyGtkScrolledWindow_Type
import gtk.SizeGroup as PyGtkSizeGroup_Type
import gtk.TextBuffer as PyGtkTextBuffer_Type
import gtk.TextView as PyGtkTextView_Type
import gtk.Toolbar as PyGtkToolbar_Type
import gtk.TreeModel as PyGtkTreeModel_Type
import gtk.TreeView as PyGtkTreeView_Type
import gtk.VBox as PyGtkVBox_Type
import gtk.Widget as PyGtkWidget_Type
import gtk.Window as PyGtkWindow_Type

%%
ignore-glob *_get_type

// gtk.FileSystem is not exported by current PyGTK
ignore hildon_file_system_special_location_get_display_name
ignore hildon_file_system_special_location_get_icon
ignore hildon_file_system_special_location_volumes_changed
ignore hildon_file_system_special_location_rewrite_path

%%
override hildon_calendar_popup_get_date noargs
static PyObject *
_wrap_hildon_calendar_popup_get_date(PyGObject *self)
{
    guint year, month, day;

    hildon_calendar_popup_get_date(HILDON_CALENDAR_POPUP(self->obj), &year, &month, &day);

    return Py_BuildValue("(III)", year, month, day);
}

%%
override hildon_color_button_get_color noargs
static PyObject *
_wrap_hildon_color_button_get_color(PyGObject *self)
{
    GdkColor color = {0, 0, 0, 0};

    hildon_color_button_get_color(HILDON_COLOR_BUTTON(self->obj), &color);
    return pyg_boxed_new(GDK_TYPE_COLOR, &color, TRUE, TRUE);
}

%%
override hildon_date_button_get_date noargs
static PyObject *
_wrap_hildon_date_button_get_date(PyGObject *self)
{
    guint year, month, day;

    hildon_date_button_get_date(HILDON_DATE_BUTTON(self->obj), &year, &month, &day);

    return Py_BuildValue("(III)", year, month, day);
}

%%
override hildon_date_editor_get_date noargs
static PyObject *
_wrap_hildon_date_editor_get_date(PyGObject *self)
{
    guint year, month, day;

    hildon_date_editor_get_date(HILDON_DATE_EDITOR(self->obj), &year, &month, &day);

    return Py_BuildValue("(III)", year, month, day);
}

%%
override hildon_range_editor_get_range noargs 
static PyObject *
_wrap_hildon_range_editor_get_range(PyGObject *self)
{
    gint start, end;

    hildon_range_editor_get_range(HILDON_RANGE_EDITOR(self->obj), &start, &end);

    return Py_BuildValue("(ii)", start, end);
}

%%
override hildon_time_editor_get_duration_range noargs
static PyObject *
_wrap_hildon_time_editor_get_duration_range(PyGObject *self)
{
    guint min_seconds, max_seconds;

    hildon_time_editor_get_duration_range(HILDON_TIME_EDITOR(self->obj), &min_seconds, &max_seconds);

    return Py_BuildValue("(II)", min_seconds, max_seconds);
}

%%
override hildon_time_editor_get_time noargs
static PyObject *
_wrap_hildon_time_editor_get_time(PyGObject *self)
{
    guint hours, minutes, seconds;

    hildon_time_editor_get_time(HILDON_TIME_EDITOR(self->obj), &hours, &minutes, &seconds);

    return Py_BuildValue("(III)", hours, minutes, seconds);
}

%%
override hildon_time_picker_get_time noargs
static PyObject *
_wrap_hildon_time_picker_get_time(PyGObject *self)
{
    guint hours, minutes;

    hildon_time_picker_get_time(HILDON_TIME_PICKER(self->obj), &hours, &minutes);

    return Py_BuildValue("(II)", hours, minutes);
}

%%
override hildon_weekday_picker_set_day kwargs
static PyObject *
_wrap_hildon_weekday_picker_set_day(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "day", NULL };
    PyObject *py_day = NULL;
    GDateWeekday day;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:HildonWeekdayPicker.set_day", kwlist, &py_day))
        return NULL;
    if (pyg_enum_get_value(HILDON_TYPE_DATE_WEEKDAY, py_day, (gpointer)&day))
        return NULL;

    hildon_weekday_picker_set_day(HILDON_WEEKDAY_PICKER(self->obj), day);

    Py_INCREF(Py_None);
    return Py_None;
}

%%
override hildon_weekday_picker_unset_day kwargs
static PyObject *
_wrap_hildon_weekday_picker_unset_day(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "day", NULL };
    PyObject *py_day = NULL;
    GDateWeekday day;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:HildonWeekdayPicker.unset_day", kwlist, &py_day))
        return NULL;
    if (pyg_enum_get_value(HILDON_TYPE_DATE_WEEKDAY, py_day, (gpointer)&day))
        return NULL;

    hildon_weekday_picker_unset_day(HILDON_WEEKDAY_PICKER(self->obj), day);

    Py_INCREF(Py_None);
    return Py_None;
}

%%
override hildon_weekday_picker_toggle_day kwargs
static PyObject *
_wrap_hildon_weekday_picker_toggle_day(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "day", NULL };
    PyObject *py_day = NULL;
    GDateWeekday day;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:HildonWeekdayPicker.toggle_day", kwlist, &py_day))
        return NULL;
    if (pyg_enum_get_value(HILDON_TYPE_DATE_WEEKDAY, py_day, (gpointer)&day))
        return NULL;

    hildon_weekday_picker_toggle_day(HILDON_WEEKDAY_PICKER(self->obj), day);

    Py_INCREF(Py_None);
    return Py_None;
}

%%
override hildon_weekday_picker_isset_day kwargs
static PyObject *
_wrap_hildon_weekday_picker_isset_day(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "day", NULL };
    PyObject *py_day = NULL;
    int ret;
    GDateWeekday day;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:HildonWeekdayPicker.isset_day", kwlist, &py_day))
        return NULL;
    if (pyg_enum_get_value(HILDON_TYPE_DATE_WEEKDAY, py_day, (gpointer)&day))
        return NULL;

    ret = hildon_weekday_picker_isset_day(HILDON_WEEKDAY_PICKER(self->obj), day);

    return PyBool_FromLong(ret);
}

%%
override hildon_window_set_app_menu kwargs

static void __hildon_window_set_app_menu_destroy(gpointer user_data)
{
    PyGObject *py_menu = user_data;
    py_menu->obj = NULL;
    Py_XDECREF(py_menu);
}

static PyObject *
_wrap_hildon_window_set_app_menu(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "menu", NULL };
    PyGObject *py_menu = NULL;
    HildonAppMenu *menu = NULL;
    static PyGObject *current_py_menu = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"|O:HildonWindow.set_app_menu", kwlist, &py_menu))
        return NULL;
    if ((PyObject *)py_menu == Py_None)
        menu = NULL;
    else if (py_menu && pygobject_check(py_menu, &PyHildonAppMenu_Type))
        menu = HILDON_APP_MENU(py_menu->obj);
    else if (py_menu) {
        PyErr_SetString(PyExc_TypeError, "menu should be a HildonAppMenu or None");
        return NULL;
    }
    if (py_menu != current_py_menu) {
        hildon_window_set_app_menu(HILDON_WINDOW(self->obj), (HildonAppMenu *) menu);
        if (current_py_menu != NULL) {
            current_py_menu->obj = NULL;
            Py_DECREF(current_py_menu);
        }
        if (menu == NULL) {
            current_py_menu = NULL;
        } else {
            current_py_menu = py_menu;
            Py_INCREF(current_py_menu);
        }
    }

    Py_INCREF(Py_None);
    return Py_None;
}
